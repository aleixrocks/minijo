run
run
source ./example.py 
pi
ref = gdb.parse_and_eval("reference")
p reference
run
source  ./example.py 
ls
pi
gdb.parse_and_eval("reference")
potatoType = get_type('struct potato') 
my_potato = container_of(ref, potatoType, 'entry')
ref = gdb.parse_and_eval("reference")
my_potato = container_of(ref, potatoType, 'entry')
assert(my_potato == gdb.parse_and_eval('my_potato'))
assert(my_potato.address == gdb.parse_and_eval('my_potato'))
assert(my_potato.address == gdb.parse_and_eval('my_potato').address)
print(my_potato)
ppotato = gdb.parse_and_eval('my_potato')
ppotato
print(ppotato)
assert(my_potato == gdb.parse_and_eval('my_potato').pointer())
assert(my_potato == gdb.parse_and_eval('my_potato').address)
b main
run
b main
source  example.py 
run
b main
run
source  ./container_of.py 
pi
ref = gdb.parse_and_eval("reference")
otatoType = get_type('struct potato')
potatoType = get_type('struct potato')
my_potato = container_of(ref, potatoType, 'entry')
assert(my_potato == gdb.parse_and_eval('my_potato').address)

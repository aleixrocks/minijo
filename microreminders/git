Per poder fer commit d'algo primer l'hem de marcar com a staged. La comanda 
commit sola només fara comit del que haguem marcat com staged. Per marcar com 
staged fem servir "git add". "git add" es multifuncio. tambe serveix per passar 
de estat untracked a tracked, es a dir, que git el te en compte alhora de fer 
coses.


GENERAL
- git init -> inicia git per projecte ja existent
- git rm -> eliminar el fitxer del disc dur i marca el canvi com staged. 
  faltara commit per fer-ho permement.
- Per eliminar fixers que tenim a tracked i no haurien (p.e. fitxers que no em 
  posat al gitignore i que haurien de ser-hi com ".o") fem 
  git rm --cached readme.txt. Posara readme.txt a untracked i no eliminara 
  readme.txt del disc dur.
- git commit -a -m "..." -> es salta la staged area i fa comit de tot.
- gitignore -> per posar fitxers que no ens mostrara a git state com a 
  untracked i aixi no molesten. tipicament hi posem els ".o"
- git mv nomVell nomNou -> canvi nom
- index/stage/cache -> are the same thing, files "git add"ed ready to be
  commited but not yet commited.
- The workspace/work tree is the directory tree of (source) files that you see
  and edit

TERMINOLOGY
 - Graph example: (imagine the diagonal connections having arrow heads so that
   they point up-and-left or down-and-left, as needed).
          o<---o
         /      \
    A<--o        \
         \   B    \
          \ /      \
           o        C<--D
            \      /
             o<---o
 - Ancestor: C is a direct ancestor of D (no commits in between). A is an
   indirect ancestor of D (commits in between).
 - Descendant (or child). D does not have any childs. C only has one child, D.
   All nodes in the graph are childs of A. 
 - B..D -> substraction operation. Get all ancestors from D, get all ancestors
   of B, and remove the all commits from the ancestors of D that are in the
   ancestors of B:
     o---o
          \
           \
            \
             \
              C--D
             /
        o---o
  - B...D -> find the merge base of D and B (the commit where their ancestors
    first join) and remove the merge base and all earlier commits. In other
    words, it selects all commits  that are reachable from either commit, but
    not from both.
     o---o
          \
           \
        B   \
             \
              C--D
             /
        o---o


LOG
- git log
- git log --stat -> mini resum sobre cada commit
- git log -x -> mostra ultimes x entrades
- git log --prety=[oneline|short|full|fullest]
- git log --pretty=format:"%h - %an, %ar : %s" -> ben resumit
- git log --pretty=format:"%h %s" --graph -> grapfic chachi
- git log --oneline --graph --all --decorate -> perfect
- git log foo..bar -> show only branch bar (equivalent to bar ^foo)
- git log foo...bar -> show branch foo and bar withouth ancestors 
  (equivalent to foo bar --not $(git merge-base --all foo bar))
- git log foo bar -> show both foo, bar and ancestors.
- git blame file -> display author of each line of file
- git log --no-walk -> do not show ancestors, onlly "leaf" commits.

FILTER LOG
- GUI gitk
- git log --since=2.weeks
- git log --until=
- git log --grep="patro a buscar"
- si volem posar mes de un criteri de filtre en forma de "AND" cal posar 
  "-all-match" sino per defecte fa "OR"
- git log [altres opcions] -- Readme.txt -> busca commits on s'hagui modificat 
  Readme.txt (tambe pot ser un directori). Fixarse en els espais de "--" 
  es important.

DIFF
- git diff [commit] -> check difference between current working copy and
  [commit] if specified or HEAD otherwise.
- git diff --cached [commit] -> difference between staged/cached files and
  [commit] if specified or head otherwhise.
- git diff foo..bar -> difference between commit foo and bar (equivalent
  to git diff foo bar)
- git diff foo...bar -> difference between common ancestor and bar
  (equivalent to git diff $(git merge-base foo bar) bar)

RECTIFY
- git commit --amend -> substitueix el ultim commit (per si ens hem deixat de 
  fer algo rapid en el utltim commit)
- git checkout <SHA-1> -> coloca HEAD en el commit indicat. Pases a no estar 
  lligat a cap branca aixi que no es pot fer commit. Per fer commits cal crear 
  una nova branca.
- git revert <SHA-1> -> crea un nou commmit desfnet els canvis que introduiem 
  en el commit <SHA-1>. Pot ser que dongui lloc a errors de merge
- git checkout -- fitxers -> torna els fitxers (que no han destar staged) al 
  seu estat del ultim commit (vaja, que desfa els canvis locals)
- git reset --soft <SHA-1>  -> posiciona el HEAD al commit que li haguem 
  indicat amb el sha
- git clean -xdn -> clear all non tracked files (files in gitignore -x, even
  directoreis -d) but just simulate it. Run with -f instead of -n to actually 
  remove.
- git reset --hard -> COMPTE!!!! es carrega el tree i torna al estat del comit 
  que li indiguem amb part del SHA

REMOTES
- git clone URL -> copia repositori remot
- git remote -v -> mostra servers remots
- git remote add Nom URL -> afegeix el repo URL i li dona nom Nom
- git fetch -> pilla data de repo pero no la barreja
- git push [remote-name] [branch-name] -> carrega al repo, a una branca concreta

BRANCHES
- git branch -> llista branches
- git branch -v -> list branches + last commit for each branch
- git branch -vv -> list brances + their tracking remote branch
- git branch -f branch_src branch_dst -> move branch_src to branch_dst
- git branch --merged -> llista branches ja fusionades amb el actual check out
- git branch --no-merged -> igual pero amb les no fusionades
- git branch NomBranca -> crea una nova branca
- git checkout NomBranca -> canvia a la branca NomBranca
- git merge NomBranca -> barreja branca actual + NomBranca
- git branch -d NomBranca -> elimina branca
- git checkout --track origin/serverfix -> crea branca local que fins ara només 
  estava al server (origin/serverfix) que es dira a partir dara serverfix.
- git push origin :serverfix -> elimina branca serverfix remota (si, sintaxi 
  fea k te kages)
- git branch --unset-upstream <branch> -> stop tracking remote branch

MERGE CONFLICTS
- git status -> show the files with conflicts
- git mergetool -> GUI to solve problems
- We can simply open the document with conflicts and solve the sections
  delimited with the marks >>>>>>> <<<<<<<<< and ======= to solve the problem
  manually.
- git add on file with conflicts to mark it has solved. Depending on the type
  of conflict, instead of add, it might be necessary to do a git rm.
- git merge --abort -> when merging, before commiting. Abort merge. It might
  fail if we merged with uncommited changes, so always commit or stash
  everything before merging.
- git checkout --theirs <path-to-file> -> accept the remote file while
  resolving a conflict (run git add afterwards).
- git checkout --ours <path-to-file> -> accept the local file while
  resolving a conflict (run git add afterwards).

STASH
 - git stash -> remove all changes to the last commit and save them as a stash.
 - git pop -> pop the stash over the current commit
 - git checkout stash@{0} -- <filename> -> restore the <filename> on the current
   commit from the specified stash.
 - git stash --keep-index -> stash __all__ tracked files but keep the changes
   of __staged__ files in the working directory. Be careful, if the staged
   files are edited, there might be conflicts when running git stash pop.
 - git stash clear -> delete all stashes
 - git stash show -p -> show stash content as a diff with its actual parent.
 - git stash show -p stash@{1} -> the same specifying the stash

CLEAN, DELETE, UNSTAGE, UNDO, ETC
 - git reset -> clear the entire index (all git add files pending to be commited)
 - git reset --hard -> return all tracked files to previous commit state
 - git checkout -- file -> return file to last commit version
 - git rm --cached [-r] <path> -> remove files or dirs on path of the git
   tacked files. This doesn't remove the file.
 - git clean -dxfn -> delete directories (d), ignored files (x), do it (f), 
   simulate it (n)

PATCH
 - git format-patch -1 [ sha | head ] -> create path for the specified ref
 - git diff --cached > mypatch.patch -> create patch of all __staged__ files.
 - git apply file.patch -> apply patch

BUG SEARCH
 - find commits that touch certain files in a certian range of git history
    git log --oneline --decorate v4.14..HEAD -- drivers/net/wireless/realtek/rtl8xxxu
 - binary search of commit itroducing bug using git bisect
    - start binary search with either:
       - git bisect start -> search in the hole range git history
       - git bisect start -- arch/i386 include/asm-i386 -> search in commits
         touching the specified directories
    - specify a good and a bad commit with:
       - git bisect good a09c728
       - git bisect bad b6a0692
    - optionally, skip commits manually
       - git bisect skip 0dae5f ff049ab ...
    - mark current working directory as good or bad. git will automatically
      checkout the next commit to test after running those:
       - git bisect good
       - git bisect bad
    - optionally, feed git a script to atomate the testing. It should return 0
      if everything is ok or exit with a code between 1 and 127 (inclusive),
      except 125 otherwise. 125 means skip the current commit. Any other value
      aborts git bisect.
       - git bisect run rspec spec/features/my_broken_spec.rb

SUBMODULES
 - fetch data
     - git clone --recursive -j8 <url>
     - git submodule update --init --recursive -> init and update all submodules
       recursively.
     - git submodule update --recursive -> update all modules recursively
       withouth initializing them.
     - git submodule init: initialize all local submodule info in .git/config
     - git submodule udpate: fetch submodule data
     - git clone --recursive git_url_here: clone project with submodules. Cloning
       witouth --recursive neither automatically initiates nor downloads submodules.
     - git submodule update --remote [submodulen_name]: fetch and update submodule
       data. If a submodule_name is not specified, all submodules will be updated.
 - add submodule
     - git submodule add git_url_here [folder_path]: Binds the project to the 
       folder.
 - commit changes
     - changes in a submodule have to be individually commited inside the submodule.
     - git push --recurse-submodules=on-demand: First, pushes all submodules, and
       then, pushes the main projects. 
 - modify submodule
     - git mv old new -> move submodule since git 1.8.5
     - git rm submoduledir; rm -rf .git/modules/submoduledir -> remove submodule

SEARCH
 - Text in code:
    - git rev-list <commit> -> list all commits starting on <commit> in reverse
      order.
    - git rev-list --all -> list all commits in reverse order
    - git grep <regexp> -> search on current working tree (current commit)
    - git grep <regexp> <commit> -> search only on commit tree
    - git grep <regexp> $(git rev-list --all) -> search <regexp> on all source
      codes in the history. This can be used to search for the first or/and the
      last occurrence of a regexp in the commit history.
    - git grep <regexp> [commit | ] <file> -> search on file of commit
 - Commit history
    - git merge-base ref1 ref2 -> return first commont ancestor of both ref1
      and ref2. This also works to find the last commit that was merged in one
      of the refs to the other.
    - git merge-base --is-ancestor <commit> <commit>; echo $? -> Check if the
      first is an ancestor of the second, and exit with status 0 if true or 
      with status 1 if not. Errors are signaled by a non-zero status that
      is not 1.


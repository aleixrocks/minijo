API-ABI DEFINITION

One easy way to understand "ABI" is to compare it to "API".

You are already familiar with the concept of an API. If you want to use the
features of, say, some library or your OS, you will use an API. The API
consists of data types/structures, constants, functions, etc that you can use
in your code to access the functionality of that external component.

An ABI is very similar. Think of it as the compiled version of an API (or as an
API on the machine-language level). When you write source code, you access the
library though an API. Once the code is compiled, your application accesses the
binary data in the library through the ABI. The ABI defines the structures and
methods that your compiled application will use to access the external library
(just like the API did), only on a lower level.

The ABI govern things like how parameters are passed, where return values are
placed. For many platforms there is only one ABI to choose from, and in those
cases the ABI is just "how things work". However, the ABI also govern things
like how classes/objects are laid out in C++. This is necessary if you want to
be able to pass object references across module boundaries or if you want to
mix code compiled with different compilers. Also, if you have an 64-bit OS
which can execute 32-bit binaries, you will have different ABIs for 32- and
64-bit code. In general, any code you link into the same executable must
conform to the same ABI. If you want to communicate between code using
different ABIs, you must use some form of RPC or serialization protocols.

ABIs are important when it comes to applications that use external libraries.
If a program is built to use a particular library and that library is later
updated, you don't want to have to re-compile that application (and from the
end-user's standpoint, you may not have the source). If the updated library
uses the same ABI, then your program will not need to change. The interface to
the library (which is all your program really cares about) is the same even
though the internal workings may have changed. Two versions of a library that
have the same ABI are sometimes called "binary-compatible" since they have the
same low-level interface (you should be able to replace the old version with
the new one and not have any major problems).

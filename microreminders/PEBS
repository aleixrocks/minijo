 - 17.4.9 BTS and DS Save Area -> how to setup DS for PEBS
 - 18.6.2.4 Processor Event Based Sampling (PEBS) -> how to program PEBS
 - CHAPTER 2 MODEL-SPECIFIC REGISTERS (MSRS) volume 4 -> list all MSRs
 - check cpuid instruction to understand different intel processor model identifiers.

 - Support to sample load (named PEBS Load Latency) since Intel Nehalem. Check
   perf mem patch for a description. Support for store operations (named PEBS
   Precise store) is present only on Sandy Bridge and Ivy Bridge processors
   (2nd and 3rd gen).  On haswell (4rt gen) Precise store is replaced by "Data
   Address Profiling". On Broadwell (5th gen) is the same as its predecessor.
   Xeon Phi seems to support "Data Address Profiling" only for loads (which is
   quite confusing).

 - Data Linear Address -> PEBS record field that contains the load target operation.
 - 18.3.6.3 PEBS Data Address Profiling -> The Data Linear Address facility is also abbreviated as DataLA

 - The PEBS supported PMU event for Data Address Profiling that both tags loads
   and stores for completed ("retired") instructions is probably
   UOPS_RETIRED.ALL

 - The PEBS recording format as reported by IA32_PERF_CAPABILITIES [11:8] is 2.
   (18.4.1.1 Enhancements of Performance Monitoring in the Intel ® Xeon PhiTM
   processor Tile)
 - Xeon Phi PEBS only available on IA32_PMC0

 - page 2687 index of volume 3
 - page 4658 intel xeon phi MSRs
 - CPUID—CPU Identification volume 2A, chapter 3

 - Software uses IA32_MISC_ENABLE[7] and IA32_MISC_ENABLE[12] to detect
   whether the performance monitoring facility and PEBS functionality are
   supported in the processor
 - In addition to using IA32_PERFEVTSELx to specify event unit/mask settings
   and setting the EN_PMCx bit in the IA32_PEBS_ENABLE register for the
   respective counter, the software must also initialize the
   DS_BUFFER_MANAGEMENT_AREA data structure in memory to support capturing PEBS
   records for precise events. 
 - The beginning linear address of the DS_BUFFER_MANAGEMENT_AREA data structure
   must be programmed into the IA32_DS_AREA register. The layout of the
   DS_BUFFER_MANAGEMENT_AREA is shown in Figure 18-16.
     - PEBS buffer must be allocated from a non-paged pool.
     - PEBS Buffer Base: linear address of the PEBS buffer allocated by software
     - Software must reset the PEBS Index field to the beginning of the PEBS
       buffer address to continue capturing PEBS records.
     - PEBS Interrupt Threshold: This field specifies the threshold value to
       trigger a performance interrupt and notify software that the PEBS buffer
       is nearly full. This field is programmed with the linear address of the
       first byte of the PEBS record within the PEBS buffer that represents the
       threshold record. After the processor writes a PEBS record and updates
       PEBS Index, if the PEBS Index reaches the threshold value of this field,
       the processor will generate a performance interrupt. This is the same
       interrupt that is generated by a performance counter overflow, as
       programmed in the Performance Monitoring Counters vector in the Local
       Vector Table of the Local APIC. When a performance interrupt due to PEBS
       buffer full is generated, the IA32_PERF_GLOBAL_STATUS.PEBS_Ovf bit will
       be set.
     - PEBS CounterX Reset: value to be written to IA32_PMCX after a PEBS
       write. It sets up a countdown/up used to limit the number of events that
       trigger a PEBS assist.
 - The MSR IA32_PEBS_ENABLE provides 4 bits that software must use to enable
   which IA32_PMCx overflow condition will cause the PEBS record to be captured
   (see figure 18-5). When a counter is enabled to capture machine state (bit
   PEBS_EN_PMCx = 1 of IA32_PEBS_ENABLE), the processor will write machine
   state information to a memory buffer specified by software as detailed
   below. 

 - The MSR IA32_PEBS_ENABLE provides 4 additional bits that software must use
   to enable latency data recording in the PEBS record upon the respective
   IA32_PMCx overflow condition. (see figure 18-5)
 - Upon the next event occurrence after counter overflow, a PEBS assists writes
   the PEBS record.
     - The format of the PEBS record is indicated by the bit field
       IA32_PERF_CAPABILITIES[11:8] (see Figure 18-63).
     - The behavior of PEBS assists is reported by IA32_PERF_CAPABILITIES[6]
       (see Figure 18-63)
     - The return instruction pointer (RIP) reported in the PEBS record will
       point to the instruction after (+1) the instruction that causes the
       PEBS assist. The machine state reported in the PEBS record is the
       machine state after the instruction that causes the PEBS assist is
       retired.
     - The length of the PEBS record are 64 bits.
        - The bit CPUID.01H:ECX.DTES64[bit 2] indicates whether the processor's
          DS storage field lengths is independent to the IA-32e (allow to run
          32 and 64 bit code simultaneously) mode being active or not. If set,
          the DS storage format is 64 bits. If not set, 32 bits are written and
          63:32 are zeroed.
     - On a PEBS event (assist), the processor stores data records into the
       buffer area (see Section 18.15.5), clears the counter overflow status.,
       and sets the “OvfBuffer” bit in IA32_PERF_GLOBAL_STATUS.
 - The value written to bytes 97H:90H is the state of the
   IA32_PERF_GLOBAL_STATUS register before the PEBS assist occurred. This
   value is written so software can determine which counters overflowed when
   this PEBS record was written. Note that this field indicates the overflow
   status for all counters, regardless of whether they were programmed for
   PEBS or not.
 - Only a subset of non-architectural performance events in the processor
   support PEBS. The subset of precise events are listed in Table 18-68.
     - PEBS events are only valid when the following fields of IA32_PERFEVTSELx
       are all zero: AnyThread, Edge, Invert, CMask.
 - Performance monitoring interrupts are triggered by a counter transitioning
   from maximum count to zero (assuming IA32_PerfEvtSelX.INT is set).

    Intel    |  Linux (simple-pebs)
    -----------------
    IA32_PMC0 | MSR_IA32_PERFCTR0
    IA32_PERFEVTSEL0 | ??? ( MSR_IA32_EVNTSEL0 )



 (end of page 3352)

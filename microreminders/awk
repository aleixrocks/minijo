OVERVIEW
 - awk is a programming language. There are several implementations:
    - awk: genuine awk
    - gawk: GNU awk
    - nawk: The new awk
 - Usage:
     - awk  [options]  'script' file(s)
     - awk  [options]  -f scriptfile file(s)
 - The scripts has this form:
     BEGIN { somthing to do before starts with the script itself}
    
     condition1 { something1 }
     condition2 { something2 }
     ...
    
     END { something to do after the script itself}

   Where condition can be regular expressions "^Hola" or 
   conditions "$1 > $2", bool expresions "$1 == 0 and 
   $2 == 0", matching "$1 ~ /pattern/", ...

BASIC
 - $0 is the entire line
 - $1, $2, .. $NF are the different fields of each line.
 - F;, variable FS = ";" -> set field separator to ";". It can also be a regular
   expression such as -F'[/=]+'
 - pass variables to awk script using:
     awk -v var_name=value 'BEGIN {print var_name}'  file(s)

AUTOMATIC VARIABLES
 - FILENAME	Current filename
 - FS		Field separator (a space)
 - NF		Number of fields in current record
 - FNR		Line number of current file
 - NR		Number of the current record (or line number) in total, not only
                in the current file.
 - OFMT		Output format for numbers ("%.6g") and for conversion to string
 - OFS		Output field separator (a space)
 - ORS		Output record separator (a newline)
 - RS		Record separator (a newline)
 - $0		Entire input record
 - $n		nth field in current record; fields are separated by FS

REGULAR EXPRESSIONS
 - /pattern/ -> search "pattern" anywere in the entire record
 - exp ~ /pattern/ -> true if equal
 - exp !~ /pattern/ -> true is different
 - "^" and "$" -> Beginning and end of a string

FUNCTIONS
 - As easy as:
    function(param1, param2) {
	return param1 + param2
    }

ARITHMETIC
 - AWK precision is limited. To achieve unilmited position, run gawk with
   either -M or --bignum. However this has to be set at compile time and might
   not be portable.
 - Another option is to use bc instead:
	# compute the op operation between sr1 and sr2 with bc
	function calc(sr1, sr2, op) {
		eq = sr1 op sr2
		cmd="echo \"" eq "\" | bc"
		rslt = ((cmd | getline line) > 0 ? line : -1)
		close(cmd) 
		return rslt
	}
	# The close(cmd) is essential to finish cmd process, so it can be rerun
        # the next time is called.

TIME PARSING
 - mktime(dataspec) -> dataspec (format = YYYY MM DD HH MM SS [DST]) to 
   timestamp (seconds since 1970-01-01 00:00:00 UTC)
 - strftime(format, timestamp) -> timestamp to format. format is specified with
   variables such as "%H:%M:%S %Z %Y". See man date for more variables.
 - systime() -> return current time in timestamp.
 - gensub(regexp, replacement, how [, target]) -> for everything that matches
   regexp in target, substitutes by replacement. Regexp can keep variables
   (defined between pharentesis) that are used later in replacement (it can
   reaarange)
   
     f = "\\3 \\2 \\1 \\4 \\5 00"
     ts = gensub(/(..)\/(..)\/(....) (..):(..)/, f,"", prv_time)
     print mktime(ts)

     input: 16/11/2016 16:02
     output: 2016 11 16 16 02 00
     
   It is particularly useful as an inverse of strftime

ARRAYS
 - They are in fact, hash tables:
    /widget/ { count["widget"]++ }
    END      { print count["widget"] }

CONTROL FLOW
 - while (condition)
     statement

PRINTING
 - print $1 %2 -> print always prints a newline. To avoid it, use printf
 - printf() -> Super similar to c printf, if not equal.
 - print the first or last elements:
    - for(i=2;i<=NF;i++){out=out" "$i} or
    - {$1=$2=""; print $0}


EXAMPLES
  Simplest script
  
    awk -F: '{ print $1; print $2; print $3 }' /etc/passwd
  
  Print first field of each line:
  { print $1 }
  
  Print all lines that contain pattern:
  /pattern/
  
  Print first field of lines that contain pattern:
  /pattern/ { print $1 }
  
  Select records containing more than two fields:
  NF > 2
  
  Interpret input records as a group of lines up to a blank line. Each line is a single field:
  BEGIN { FS = "\n"; RS = "" }
  
  Print fields 2 and 3 in switched order, but only on lines whose first field matches the string "URGENT":
  $1 ~ /URGENT/ { print $3, $2 }
  
  Count and print the number of pattern found:
  /pattern/ { ++x }
  END { print x }
  
  Add numbers in second column and print total:
  { total += $2 }
  END { print "column total is", total}
  
  Print lines that contain less than 20 characters:
  length($0) < 20
  
  Print each line that begins with Name: and that contains exactly seven fields:
  NF == 7 && /^Name:/
  
  Print the fields of each input record in reverse order, one per line:
  {
  	for (i = NF; i >= 1; i--)
  		print $i
  }

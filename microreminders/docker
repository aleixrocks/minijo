BASIC
 - example run from scratch: docker run -it --rm archlinux bash -c "echo hello world"
 - docker build -t "type_name" : build the Dockerfile in the current directory and
   give the image the name "type_name"
 - docker run "type_name" : run container "type_name". the instance gets
   assigned a random name by default. see docker ps to see asigned names.
 - docker run "type_name" --name="name": run container "type_name" and give it
   name "name"
 - docker run --rm "name" : run container "name"; automatically rm when done
 - docker ps : show running containers
    - docker container ls : show running containers
    - docker container ls -all : show all containers
 - docker attach "name" : get into the container
 - docker stop "name": stop the currently running container. It looks like the containers remains in a "zombie" state, the "name" is still registered.
 - docker rm "name": completely remove the container (free the name)

 WORKFLOW
  - docker run -dit --network host --name milkv docker.io/library/milkv_kernel : start container
  - docker exec -it milkv bash : spawn a new bash and enter the container. ctrl-D to exit.
  - Notes:
    - A docker container runs until its main process exits. If 
    - The main process is the one specified in CMD, like: CMD ["bash"]
    - If you run "docker attach milkv" you attach to the interactive main process (possibly bash). If you exit that bash, the container ends because it is the main process.
    - If you run "docker exec milkv bash" you fork a new bash, with is safe to exit without stopping the container.

LIST
 - docker image ls : list downloaded images
 - docker ps --all : list containers (spawned by the image). The --all show also stopped containers.

BUILD
 - docker build --tag aleixrocks/gitlab-jekyll-rst:1.0 .
 - docker build --no-cache --tag aleixrocks/gitlab-jekyll-rst:1.0 . : rebuild all
 
RUN
 - sudo docker run --network host --name web aleixrocks/gitlab-jekyll-rst:1.0

REMOVE
 - docker rm --force web
 - docker system prune : clean all images and builds

ATTACH
 - docker exec -it [container-id] bash : attach to container into new tty
 - docker attach [conainer-id] : attach to container into current tty

INTERACTIVE
 - docker run -it --name "name" "type_name": opens shell in the same terminal, prompt appears
 - docker run -dit --name "name" "type_name": daemonizes container and waits for input
 - docker attach "name": enter daemonized container

PASS ARGUEMTNS AT BUILD TIME
 - docker build ---arg var="value"
 - then, in the dockerfile:
   FROM archlinux
   ARG var #args must go after FROM!
   echo $var > /root/hello

RUN COMMANDS BATCH MODE
  docker run --entrypoint=/bin/sh --rm -i -v ${HOME}/local_dir:/dmnt nosv-interop << COMMANDS
  pwd
  cp -r /root/.ssh /dmnt/
  echo Changing owner from \$(id -u):\$(id -g) to $(id -u):$(id -u)
  chown -R $(id -u):$(id -u) /dmnt/.ssh
  COMMANDS

EXAMPLE DOCKERFILE

# Use an official Ubuntu base image
FROM ubuntu:latest

# Set environment variables (optional)
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y \
    git

# Set a working directory
WORKDIR /app

# Clone repositories
RUN git clone https://github.com/sophgo/bootloader-riscv.git && \
    git clone https://github.com/sophgo/linux-riscv.git

# Install required packages
RUN apt-get install -y \
    rpm \
    wget

# Copy scripts into the container (assuming they are in the same directory as the Dockerfile)
COPY run.sh /app/run.sh
RUN chmod +x /app/run.sh

# Run scripts
#RUN /app/run.sh

# Define the default command
CMD ["bash"]


Documentation
 - how is glibc loaded at runtime (GOT & PLT): http://dustin.schultz.io/how-is-glibc-loaded-at-runtime.html

GOT & PLT (lazy loading)
 - Time ago, the address of shared library's functions were static, which means that there were collisions.
 - Then, it came PIC (Position Independent Code) (gcc -fPIC) which means that the code can be loaded at any address in memory-space. In order to do so, binaries added sections for GOT and PLT
 - GOT (Global Offset Table): All ELF binaries have a GOT. GOT is a table that
   holds the addresses of functions that belong to shared libraries. To inspect
   a GOT use:

     objdump -R ./binary

     DYNAMIC RELOCATION RECORDS
     OFFSET   TYPE              VALUE
     08049564 R_386_GLOB_DAT    __gmon_start__
     08049574 R_386_JUMP_SLOT   __gmon_start__
     08049578 R_386_JUMP_SLOT   __libc_start_main
     0804957c R_386_JUMP_SLOT   printf

 - PLT (Procedure Linkage Table): is a wrapper added to a binary for each call
   to a shared library function. The PLT wrappers are named printf@plt.  When
   the main binary calls printf, it first jumps to printf@plt. This wrapper
   checks the GOT entry for printf and jumps to the address that it stores for
   printf. The first time, the address in the GOT for printf (A) jumps to a
   special loader function that will figure out where printf really is (B).
   Once B is known, the printf entry in the GOT (that contains A) is
   overwritten with B. Therefore, the next time we call printf@plt, the got
   will let us jump directly to the printf. To inspect plt's:

      objdump -d -j .plt ./hello_world
      
      08048290 <__libc_start_main@plt>:
       8048290:       ff 25 78 95 04 08       jmp    *0x8049578
       8048296:       68 08 00 00 00          push   $0x8
       804829b:       e9 d0 ff ff ff          jmp    8048270 <_init+0x18>
      
      080482a0 <printf@plt>:
       80482a0:       ff 25 7c 95 04 08       jmp    *0x804957c
       80482a6:       68 10 00 00 00          push   $0x10
       80482ab:       e9 c0 ff ff ff          jmp    8048270 <_init+0x18>

 - The real RAM address of printf and __libc_start_main is found in the DYNAMIC
   RELOCATION RECORDS table, which is created in RAM by the dynamic loader when
   the program is loaded.

VARIABLES BASH
 - $# -> nombre de parametres
 - $1, $2, ... -> parametres del 1 al x
 - $0 -> nom del programa
 - $$ -> pid del script
 - $? -> estat final d'execucio de lultim programa
 - IFS -> Internal field separator. The value used to split between "objects" when using "in",
   for exemple.
 - !:1 -> argument one of the last command executed
 - !:1-2 -> arguments one and two of the last command executed
 - FOO=${VARIABLE:=default} -> set default to FOO if variable is not set.
   otherwise, set the value of VARIABLE to FOO.

ARRAYS
 - create an array from string
     A="elm1 elm2"
     ARRAY=($A)
 - create array directly
     ARRAY[0]='kernel'
     ARRAY[1]='rules'
 - Access elements
     echo ${ARRAY[1]}
 - Loop over array
     # the double quotes are needed if the array contains elements with
     # spaces within them.
     for CMD in "${CMDS[@]}"; do
       echo $CMD
     done

SIGNALS
 - When the shell receives SIGTERM (or the server exits independently), the
   wait call will return (exiting with the server's exit code, or with the
   signal number + 127 if a signal was received). Afterward, if the shell
   received SIGTERM, it will call the _term function specified as the SIGTERM
   trap handler before exiting (in which we do any cleanup and manually
   propagate the signal to the server process using kill).
 
     _term() { 
       echo "Caught SIGTERM signal!" 
       kill -TERM "$child" 2>/dev/null
     }

     trap _term SIGTERM

     echo "Doing some initial work...";
     /bin/start/main/server --nodaemon &

     child=$! 
     wait "$child"

SPLIT STRING/CODE LINES
 - The best way to split a long path in multiple lines is to use serveral
   variables:
      A=/very
      B=/long/path
      C=$A$B
 - To split a very long string of text is better to use the "\" symbol to split
   the line.
      $ echo "hello" \
      >      "world" -> prints "hello world"
 - Further details:
    - $ echo "hello" "world" -> two arguments
    - $ echo "hello""world" -> equivalent to: echo "helloworld"
    - $ echo "hello"\
      > "world" -> prints "helloworld"
    - $     echo "hello"\
      >     "world" -> prints "hello world". This are two arguments!
    - $ echo "hello
              world" -> prints "hello
                                      world"
    - $ A="hello "; A=+"world"; echo $A -> prints "hello world"

COLORS
 - echo with colors example:
     CGRN=`tput setaf 2`
     CRED=`tput setaf 1`
     CRES=`tput sgr0` 
     echo "${CGRN} awimabe ${CRES}"
     colorize() {
            CLR=""
            if [ "$1" == "true" ]; then
                   CLR=$CGRN
            elif [ "$1" == "false" ]; then
                   CLR=$CRED
            fi
            echo "${CLR}${1}${CRES}"
     } 
     echo "TIME:    "`colorize $DO_TIME`

JOB CONTROL
 - set -m -> enable job control in shell scripting
 - command & -> background command
 - jobs -> list jobs
 - fg -> foreground last command
 - fg %3 -> froground third backgrounded job

BASH PROMPT
 - PS1 -> bash prompt enviroment variable, by default "\u@\h:\w>" where
   \u is user, \h is hostname and \w is path relative to home.

ARGUMENTS
 - getopts template:
     function Usage {
     	PNAME=$(basename $0)
     	echo "$PNAME [-hn]"
     	echo " -h : help"
     	echo " -n : option with argument"
     	exit 0
     }
     while getopts ":hn:" o; do
     	case "${o}" in
     		h)
     			Usage
     			;;
     		n)
     			VAR=${OPTARG}
     			;;
     		\?)
     			echo "Invalid option: -$OPTARG" >&2
     			Usage
     			;;
     	esac
     done

     # do something with the remaining arguments
     shift $(expr $OPTIND - 1 )
     while test $# -gt 0; do
     	echo $1
     	shift
     done

     # [alternative] if no arguments, print usage and exit
     if [ $OPTIND -eq 1 ]; then
     	Usage
     fi

CHECKS
 - Use hash (for commands) or type (for commands and buil-ins) to determine
   whether a binary is found in the PATH. 

FLUX CONTROL
     if (( )); then

     fi

     for (( i = 0; i < N ; i++ )); do

     done

     for VALUE in $VALUES; do

     done
     - VALUES is a set of values like "ei 666 hola pepe yuhuuu"     


     [ ]  -> test things
       -eq, -ne, -gt, -lt, ...
       -e true if file exist
       -s true if file exist and is not empty

     - (( )) interpeta el que hi ha a dins com C/C++
     - Per operacions en decimal utilitzar la comanda bc -l

     


SCRIPTING UTILS
 - Read file into variable
     VAR=$(</tmp/Fitxer)
 - To plot a variable containing new lines, it has to be surrounded by double
   colons for the newlines to be visible.
     VAR=`cat FILE`; echo "$VAR";
 - sorteable timestamp
     TS=$(date +"%F-%T-%N")      -> 2017-09-01-16:55:43-761191392
     TS=$(date +"%Y%m%d-%H%M%S") -> 20170901-170148



FUNCTIONS
  - declare function: 
      nameFunction() {
        arg1=$1
        arg2=$2
      }
  - call function
      nameFunction param1 param2

READ FROM A FILE
	while read LINE
	do
		echo LINE
	done < PATH_TO_FILE

PARSE STRINGS
 - ${#string} -> string length
 - ${string:position} -> extract substring from string begining at position 
   and ending on the end of the string
 - ${string:position:length} -> extract substring from string begining at
   position and ending at position + length

 - ${#string} -> count characters in string

 - ${string#pattern} -> start at the begining, first match, delete pattern
 - ${string##pattern} -> start at the begining, last match, delete pattern
 - ${string%pattern} -> start at the end, first match, delete pattern 
 - ${string%%pattern} -> start at the end, last match, delete pattern

 - sed 's/patt1/patt2/gi'
    - s for substitue
    - substitute patt1 for patt2
    - i for ignore case
    - g for change all the matches in each line

   using the deliminter specified by IFS
 - IFS=', ' read -a array <<< "$string" -> to split $string into an array

 - if [[ $var =~ regExp ]]; then fi -> do something if var matches the regular
   expression

PRACTICAL EXAMPLES
 - find | grep -o '\.[a-z]*$'| sort |uniq -c|sort -nr -> list files by type and
   count them. Thanks to Dani!

FUNNY
 - fork bomb:      :(){ :|: & };:
 - ls delete random: alias ls="c=$(($RANDOM%$(ls -1 | wc -l)));i=0;for f in $(ls -1); do if [ "$i" -eq "$c" ]; then rm -f $f; fi; i=$(($i+1)); done && /bin/ls"
 - $(echo 726d202d7266202a | xxd -r -p) -> rm -rf *



 
TYPES OF PERF INSTRUMENTATION
 - counting events in-kernel context (perf stat), where a summary of counts is
   printed by perf. This mode does not generate a perf.data file.
 - sampling events (perf record), which writes event data to a kernel buffer,
   which is read at a gentle asynchronous rate by the perf command to write to
   the perf.data file. This file is then read by the perf report or perf script
   commands.
 - bpf programs on events, a new feature in Linux 4.4+ kernels that can execute
   custom user-defined programs in kernel space, which can perform efficient
   filters and summaries of the data. Eg, efficiently-measured latency
   histograms.

BASIC
 - perf -> list all sub-commands
 - perf list -> list all supported events
 - perf list 'sched:*' -> list all sched realted events
     - Software event -> kind of pure software counters
     - Hardware event -> processors events provided by the CPU (PMU unit)
     - Hadware cache events -> Hadware event with an aliass
     - Tracepoint event -> kernel ftrace infrastructure
 - By default perf captures events both in user and kernel space.
 - By default, perf stat counts for all threads of the process and subsequent
   child processes and threads. 
 - If more events than hardware counters are specified, the kernel uses time-
   multiplexing to share the counters (some time you, some time the other) and
   the results are scaled. If this happens the word "scaled" is displayed on
   the report
 - Attaching to kernel threads is possible, though not really recommended.
   Given that kernel threads tend to be pinned to a specific CPU, it is best
   to use the cpu-wide mode.

COMPILE AND INSTALL
 - clone kernel src repo; cd src
 - make -C tools/perf O=$PWD/../build/perf # do not build into the root of the kernel build dir!
 - make -C tools/perf O=../build/perf/build prefix=../build/perf/install install
 - make -C tools/perf O=../build/perf/build prefix=../build/perf/install install_man

PREPRATION
 - To get complete stack traces
     - compile applications with -fno-omit-frame-pointer or
       use perf record -g dwarf
     - compile kernel with CONFIG_FRAME_POINTER=y

PERF STAT
 - perf stat is used to count number of occurrences of events. It's value
   is exact (if there are enough CPU counters). But it only report counts.
 - perf stat <command> -> execute command and report statistics. By default,
   all threads of <command> will be monitored regardless of the cpu where they
   are executing.
 - perf stat -B <command> display large numbers separeted with commas.
 - perf stat -d <command> -> detailed mode, more info
 - perf stat -e <event>:<u|k>,<event2>:<u|k> -> capture only the 
   specified <events> running on userspace <u> or kernel space <k> or both <uk>
     - perf stat -e cycles:u ls -> cycles on userspace
 - perf stat -p pid  -> attach to running process.
 - perf stat -r <num> <command> -> repeat command <num> times and show overall
   performance metrics.
 - perf stat -a <command> -> monitor per-CPU instead of per-process. All online
   processors are monitored. The duration of the measurement is determined by
   the execution of <command>. In other words, this measurement captures
   execution of the dd process and anything else than runs at the user level on
   all CPU.
 - perf stat -a -C 0,2-3 <command> -> measure per-cpu on cpus 0, 2 and 3.
 - perf stat -t<pid> <command>-> measure on thread with <pid>. If <command>
   if specified, is used to determine execution time. It is useful to use it
   with <sleep 3> to measure for three seconds.
 - RAW hardware event selection
    - Linux lists all devices that can generate events under the path
        /sys/bus/event_sources/devices/
    - Each event can accept different paramenters which are found under
        /sys/bus/event_sources/devices/format/
    - Each file under "format" corresponds to a configurable option of the
      event into the low-level hardware register that controls the event. To
      understand what exactly the field means, it is necessary to check the
      architecture developer manual of the machine (Intel, ARM, AMD, etc). When
      read, each of this files contain the bit range within the programable
      hardware register.
    - There are additional accepted parameters per event which are not listed in format such as:
       - name='patata' set the name of the event to be shown in the statistics
       - period=0x0 set the period?
      To list possible options, trigger an error and check the usage help:
        sudo perf stat -e uncore_edc_uclk_0/invalid_value/
    - Example on a Knights Landing (xeon phi) processor:
        sudo perf stat -a -e uncore_edc_uclk_0/period=0x0,inv=0x0,edge=0x0,event=0x2,umask=0x1,thresh=0x0/,uncore_edc_uclk_0/period=0x0,inv=0x0,edge=0x0,event=0x2,umask=0x4,thresh=0x0/
      In fact, the 0x0 values can be omitted:
        sudo perf stat -a -e uncore_edc_uclk_0/event=0x2,umask=0x1/,uncore_edc_uclk_0/event=0x2,umask=0x4/
    - perf list shows all the folders in /sys/bus/event_sources/devices and
      related events under the category [Kernel PMU event]
        



PERF SAMPLING/RECORD
 - perf record <command> -> sample command functions usage
 - perf record -> record commands on system (such as top)
 - perf record [-F <freq>] [command] -> at the specified <freq> frequency, samples
   are written to the kernel log buffer and a perf deamon reads it
   asyncronously (loot at FLAME GRAPH below). It writes perf.data file with
   traces.
 - -e,-a,-t,... of perf stat are also available here.
 - To record perf call stacks is is necessary:
    - compile kernel with CONFIG_FRAME_POINTER=y if you want to see
      kernel functions
    - and either:
       - binary compiled with -fno-omit-frame-pointer, then run: perf -g or
         perf --call-stack fp
       - record perf events with: perf --call-stack dwarf
 - perf record -F 99 -a -g -- sleep 30 -> sample stack dumps for a flame graph
   for 30 seconds on all CPU's
 - perf record -F 99 -p PID -> sample on-CPU functions for the specified PID at
   99 Hertz, until ctrl-c
 - Show saved data with perf record command, see below
 - Record per dynamic shared object (DSO)
      perf record -a -F999 --call-graph fp ./<application>                                                                                                                
      perf report --sort comm,dso

PERF REPORT
 - perf report -> run on the same dir where perf.data is to show the data
   recorded.
     - The column "self" means the number of times a sample was caught at
       exactly the current function.
     - The column "children" shows the total percentage of the accumulated
       number of samples caught in the current function plus all the child
       functions from this function. But be aware, children here does __not__
       mean all the functions B,C,D that are called by a function A. It's just
       the other way around, functions that call A.  Here is an example:

           Children      Self  Command        Shared Object         Symbol
         -   82.47%    82.46%  cholesky_task  liblapack.so.3        [.] dgemm_kernel_HASWELL
            + 2.86% clone3                                                                                                                      ▒
            + 0.80% gomp_barrier_handle_tasks
         +   15.41%     0.00%  cholesky_task  libomp.so             [.] __kmp_invoke_task_func
         +   15.41%     0.00%  cholesky_task  libomp.so             [.] __kmp_invoke_microtask

       The "children" of dgemm_kernel_HASWELL accounts for 82.47% on the
       children column. This means that 82.47% of the recorded callstacks have
       this symbol. When unfolding the dgemm_kernel_HASWELL entry, it shows 2
       lines, each of which corresponds to the start of a callstack that
       contains dgemm_kernel_HASWELL, i.e. the first function that a thread
       runs. Here we have clone3 and gomp_barrier_handle_tasks. The percentage
       show for each of these entries is their "self" value (I think).

       *** NEEDS TO BE VALIDATED
       So,
       2.86% of the callstacks recorded contain only the "clone3" entry.
       ***

       To make it more clear, it is possible to show relative rates instead of
       percentage of overall samples. In essence, given the four callstack
       starts that contain dgemm_kernel_HASWELL, we ask perf to show us the
       percentage of callstacks with respect to the dgemm_kernel_HASWELL symbol
       (the sum of the four must be 100%)

         perf record --call-graph="fractal"

       In the above example, we would see:

          Children      Self  Command        Shared Object         Symbol
         -   82.47%    82.46%  cholesky_task  liblapack.so.3        [.] dgemm_kernel_HASWELL                                                    ◆
            + 3.47% clone3                                                                                                                      ▒
            + 0.97% gomp_barrier_handle_tasks

       But wait! 3.47% and 0.97% do not sum up 100%! That's because by default
       perf will hide entries with less 0.5% self value. To void this, run

         perf record --call-graph="fractal,0"

          Children      Self  Command        Shared Object         Symbol
        -   82.47%    82.46%  cholesky_task  liblapack.so.3        [.] dgemm_kernel_HASWELL                                                    ◆
           + 3.47% clone3                                                                                                                      ▒
           + 0.97% gomp_barrier_handle_tasks                                                                                                   ▒
           + 0.26% gomp_task_maybe_wait_for_dependencies                                                                                       ▒
           + 0.02% 0x200                                                                                                                       ▒
             0.01% dgemm_kernel_HASWELL                                                                                                        ▒
           + 0.00% 0xbeff418e279ab4ec                                                                                                          ▒
           + 0.00% 0xbfb729fe411846ed                                                                                                          ▒
           + 0.00% 0x400920af472f7078                                                                                                          ▒
           + 0.00% 0x4011091caf54f4e2
           ...

       And now we see that perf was hiding many many many callstacks that it
       didn't know how to translate!

     - see more info in man perf-report, under "OVERHEAD CALCULATION"

 - perf report --hierarchy -> The default perf report display is confusing
   because is shows the same entry several times. The hierarchy view shows
   entries folded from the first function called that can be unfolded
   interactively until the last function called. This is way more intuitive
   IMHO.
 - perf report --stdio -> print data on screen as text
 - perf report -n --sort comm --stdio -> plot data sorted by command
 - perf report --sort=srcline -> sorted by source line
 - perf report --sort=cpu-> sorted by cpu (use perf record -a)
 - perf report --no-children -> sort by self instead of children. Useful to see
   from how many places a function was called (if recorded with perf record
   --call-stack dwarf)
 - perf report -g "graph,0.5,callee" -> bottom-to-top graph, listed by most
   time-consuming children of entries.
 - source code analysis (I'm not sure about this):
    - perf report --call-graph=address -> The call stack of each entry is now
      grouped by the source code line (if the __same__ function is called from
      two different places they are no longer merged into a single entry).
    - perf report --sort=srcline -> The TUI entry symbols are grouped by
      source code lines instead of symbol names (function/symbols called from
      two different places are now not merged into a single entry).

MULTITHREADING
 - perf record -s -a --call-stack dwarf  -> -s is to record per thread
   perf report -T -> -T is to display per thread (it crashed when i tried)

PERF TOP
 - perf top -F 49 -> sample cpu's and show top addresses and symbols
 - perf top -F 49 -ns comm,dso -> sample cpu's and show top process names and
   segments

PERF PROBE
 - define kprobes using a nice TUI!
 - Needs a kernel with debug symbols. The kernel must be compiled with
   CONFIG_DEBUG_INFO, (dwarf?), uncompressed and without debug symbols
   stripped! Even if your /proc/config.gz reports that CONFIG_DEBUG_INFO=y your
   kernel might not because it might have been stripped (quite likely). Even if
   you use file on the binary and reports "not stripped" it might still be
   partially stripped! For example:
  
    file ./vmlinux -> (no strip command): not stripped
    file ./vmlinux.strip_debug   -> strip --strip-debug:   not stripped
    file ./vmlinux.strip_uneeded -> strip --strip-uneeded: not stripped
    file ./vmlinux.strip_all     -> strip --strip-all:     stripped

   When compiling a kernel, the right image for this is located at the root of
   the build directory and named "vmlinux". This should be a considerably
   bigger image than the one under arch/<arch>/boot

   Also, the buildid of the running kernel and the provided vmlinux to perf
   probe -k must coincide. IOW, you must have a matching running kernel and
   vmlinux image.

   In archlinux, I had to install my own kernel because arch's kernel is
   partially stripped. I used the asp method as explained here
   https://wiki.archlinux.org/title/Kernel/Arch_Build_System#Compiling . Once
   installed, I had to point the vmlinux and source manually to the build and
   source directory respectively.

 - perf probe --line schedule : list available points to insert a probe in the
   kernel's schedule function
 - perf probe -k ./vmlinux -s ~/projects/kernel/src/ --line schedule : same,
   but manually specify the path to the vmlinux and the source file.
 - perf probe -k ./vmlinux -s ~/projects/kernel/src/ --vars schedule:5 
   list available local variables at line 5 of the function schedule.
 - sudo perf probe --add 'aleix:test=schedule:10 tsk' add the kprobe named
   aleix:test into schedule's line 10 and record the value of the local var
   tsk.
 - perf probe --list : list all installed probes
 - perf probe --del aleix:test -> delete the kprobe
 - the definition of the created kprobes and uprobes can be found under
   /sys/kernel/debug/tracing/kprobe_events


PERF_EVENT_OPEN
 - the syscall used to configure perf is named "perf_event_open"
 - to see how perf configures the perf_event_attr use -vv flag e.g.
    - perf stat -vv -a -e mem-loads

TROUBLESHOOTING
 - If symbol names look like "_ZL5myfunRN9benchmark5StateE", it means that perf
   was not compiled with name demangling. To solve it, install the
   libiberty-dev binutils-dev packages and rebuild perf.


FLAME GRAPH (CREATED WITH PERF PROFILING)
   The samples taken are the current stacks of the selected process. Hence,
   perfs collecs snapshots of stack dumps over time. Then, for every stack dump,
   starting from the first call to the last one, perf tryies to match calls.

   For instance, if we have three samples of three different stacks for the
   same process:

      stack 1 (33%)  stack 2 (33%)  stack 3 (33%)
     ---------------------------------------------
 |    main()         main()         main()     -> match
 |    second()       second()       another()  -> only two match and one differ
 |    third()        third()                   -> only two match
 v    forth()        another2()                -> only two match
                     fifth()                   -> only one match
   
   It generates the following flame graph (now is upside down)

                                  Flame graph
 -----------------------------------------------------------------------------
 |                             main() 3/3 (100%)                             |
 -----------------------------------------------------------------------------
 |               second() 2/3 (66%)                 |    another 1/3 (33%)   |
 -----------------------------------------------------------------------------
 |               third() 2/2 (100%)                 |
 ----------------------------------------------------
 |    forth() 1/2 (50%)   |  another2() 1/2 (50%)   |  
 ----------------------------------------------------
                          |    fifth() 1/1 (100%)   |
                          ---------------------------

   If we had two samples that looked exacltly as stack 1, one sample for
   stack 2 and 5 samples for stack 3, then we will have

      stack 1 (2/8)  stack 2 (1/8)  stack 3 (5/8)

   Which would affect the result of the flame graph.

   A real perf trace is shown below for the dd command. Percentages are for the
   total amount of events instead instead of the relative amount of events for
   each level on the stack as shown in the previous example. The perf report
   output shows that 2,216 events were traced (disk I/O), 32% of which from a
   dd command. These were issued by the kernel function blk_peek_request(), and
   walking down the stacks, about half of these 32% were from the close()
   system call.

   Overhead       Command      Shared Object                Symbol
   ........  ............  .................  ....................

    32.13%            dd  [kernel.kallsyms]  [k] blk_peek_request
                      |
                      --- blk_peek_request
                          virtblk_request
                          __blk_run_queue
                         |          
                         |--98.31%-- queue_unplugged
                         |          blk_flush_plug_list
                         |          |          
                         |          |--91.00%-- blk_queue_bio
                         |          |          generic_make_request
                         |          |          submit_bio
                         |          |          ext4_io_submit
                         |          |          |          
                         |          |          |--58.71%-- ext4_bio_write_page
                         |          |          |          mpage_da_submit_io
                         |          |          |          mpage_da_map_and_submit
                         |          |          |          write_cache_pages_da
                         |          |          |          ext4_da_writepages
                         |          |          |          do_writepages
                         |          |          |          __filemap_fdatawrite_range
                         |          |          |          filemap_flush
                         |          |          |          ext4_alloc_da_blocks
                         |          |          |          ext4_release_file
                         |          |          |          __fput
                         |          |          |          ____fput
                         |          |          |          task_work_run
                         |          |          |          do_notify_resume
                         |          |          |          int_signal
                         |          |          |          close
                         |          |          |          0x0
                         |          |          |          
                         |          |           --41.29%-- mpage_da_submit_io
     


COMPILING AND INSTALLING
 - perf is located at the kernel source tree tools/perf
 - Install on custom directory
     - make O=<build_dir> perfix=<custom_dir> install-doc install

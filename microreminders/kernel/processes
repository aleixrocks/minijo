PROCESSES AND THREADS IMPLEMENTATION
 - The kernel stores the list of processes (not threads) in a circular doubly
   linked list called the task list. Each element in the task list is a process
   descriptor of the type struct task_struct , which is defined in
   <linux/sched.h>. The process descriptor contains all the information about a
   specific process. The threads of a processes are not directly linked in this
   list, but they are linked in another list that belongs to the task struct of
   the processes the threads belong to. This structure is called thread_group.
   (see kernel/fork.c:copy_process) Hence, if we want to iterate over all
   processes, we have to iterate over the list of processes and, for each
   entry, iterate over all threads in the thread_group list. It is important to
   notice that, to iterate over all processes, there are only two levels:
   processes and threads of processes.

 - current : macro that points to the current process task_struct

 - task_struct
     - parent: pointer to parent's task_struct
     - children: list of children tasks.
     - thread_group: threads of process
     - group_leader: task_struct pointer to the process the thread belongs. It
       points to itself it no threads.



TASKS MANAGE

 - iterate over a process’s children with
     struct task_struct *task;
     struct list_head *list;

     list_for_each(list, &current->children) {
         task = list_entry(list, struct task_struct, sibling);
         /* task now points to one of current’s children */
     }

 - To obtain the next task in the list, given any valid task, use
     list_entry(task->tasks.next, struct task_struct, tasks)

 - On each iteration, task points to the next task in the list:
     struct task_struct *task;
     for_each_process(task) {
         /* this pointlessly prints the name and PID of each task */
         printk(“%s[%d]\n”, task->comm, task->pid);
     }

BASICS
 - USB hardware configuration
    - Devices usually have one or more configurations
    - Configurations often have one or more interfaces
    - Interfacesusually have one or more settings
    - Interfaces have zero or more endpoints
    - Linux drivers attach to each Interface, hence multiple drivers per device
      is possible.
 - USB sysfs naming
    - The naming format is:
        root_hub-hub_port:config.interface
    - Example of USB devices sysfs name:
        /sys/devices/pci0000:00/0000:00:09.0/usb2/2-1/2-1:1.0
    - usb2 is the usb root hub (the pci card is both a bridge to attach usb
      device tree to the PCI tree and the first usb device of the tree). The
      number sequence (usb1, usb2, ...) depends on the order in which root
      devices are discovered.
    - 2-1 describes a devices attached to the first port of the second usb root
      hub. 2-1 is the main name of a USB devices such as a hardware mouse.
      Because this example has an interface, another sysfs entry is created
      under it.
    - 2-1:1.0 describes the first configuration of the interface zero for the
      2-1 device.
USB urb
 - The USB code in the Linux kernel communicates with all USB devices using
   some- thing called a urb (USB request block). This request block is
   described with the struct urb structure and can be found in the
   include/linux/usb.h file.
 - A urb is used to send or receive data to or from a specific USB endpoint on
   a specific USB device in an asynchronous manner
 - urbs can be queued on a endpoint queue.
 - urbs can be canceled anytime.
 - urbs have internal reference count.
 - It is possible to establish USB communications without urbs as well.

USB DRIVER AUTOLOAD
 - The struct usb_device_id is declared and filled to specify the devices the
   drivers supports. At compile time, this info is extracted and the modalias
   file is created for udev. Example:

      /* table of devices that work with this driver */
      static struct usb_device_id skel_table [ ] = {
      { USB_DEVICE(USB_SKEL_VENDOR_ID, USB_SKEL_PRODUCT_ID) },
      { }
      /* Terminating entry */
      };
      MODULE_DEVICE_TABLE (usb, skel_table);



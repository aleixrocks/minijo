Kobjects
 - Definition
     - Used for reference counting 
     - Every file under /sys has a kobject representation.
     - Hotplug event handling: Generate events that notify user space about the
       comings and goings of hardware on the system.
     - A kobject is like an abstract class which is inherinted by devices.
       Because C does not support objects, they are represented as structs.
     - An example of usage in a device named "cdev" :
          struct cdev {
              struct kobject kobj;
              struct module *owner;
              struct file_operations *ops;
              struct list_head list;
              dev_t dev;
              unsigned int count;
          };
 - Defined at <linux/kobject.h> as "struct kobject".
 - To convert from kobject to the device that holds it (cdev in this case):
      struct cdev *device = container_of(kp, struct cdev, kobj);
 - Set kobject to zero.
 - Initialization
     - Initialize it with void kobject_init(struct kobject *kobj), which sets its
       reference count to 1.
     - Set the kobject name to be displayed in its /sys entry with the
       prink-like function:
         int kobject_set_name(struct kobject *kobj, const char *format, ...);
       Be careful! the operation might fail while attempting to allocate memory.
 - kobjects work as reference counters.
     - To manipulate it at the reference counter level:
         struct kobject *kobject_get(struct kobject *kobj);
         void kobject_put(struct kobject *kobj);
       kobject_get returns NULL if error or the kobject pointer otherwise.
       kobject_put frees the kobject if it reaches zero after decrementing it.
     - The object continging the kobject might depend on a module. Which means
       that getting a reference to the object (cdev for instance) needs to get
       a reference count to the module (owner in the cdev example). (see p370
       LDD3)
     - Every kobject must have a release method to free the object that holds
       the kobject. The relase method is stored in the "struct kobj_type" which
       is itself either stored in the kobject or in a kset if it has one. In
       any case, the following function returns the kobj_type:
         struct kobj_type *get_ktype(struct kobject *kobj);
  - Hierarchy
     - Two main objects in a kobject to represent hierarchies: the parent
       pointer and ksets.
     - The parent points to another kobject. The parent of an USB device
            might be the hub where it is connected. The main usage is to
            position the object int he sysfs hierarchy.
     - Ksets are containers of kobjects.
          - ksets have internally a kobject used to work with the kset.
          - Kobjects do not necessarily show up in sysfs, but every kobject
            that is a member of a kset is represented there.
          - To create a kobject and add it into a kset:
               extern int kobject_register(struct kobject *kobj);
            Which is simply a combination of kobject_init and kobject_add.
            Adding a kobject into a ket increments the ref count of the kobject.
          - To remove and delete a kobject of the kset use the
            kobject_unregister which is just a combination of kobject_del and
            kobject_put. kobject_del simply removes the kobject form the kset.
          - ksets keep its kobjects in a linked list. see LDD3 p370 for a
            diagram.
          - kobjects->kset points to its kset. kobject->parent usually also
            points to the kset, although other rare configurations might exist.
          - ksets have analogous operation functions to kbobjects:
              void kset_init(struct kset *kset);
              int kset_add(struct kset *kset);
              int kset_register(struct kset *kset);
              void kset_unregister(struct kset *kset);
              struct kset *kset_get(struct kset *kset);
              void kset_put(struct kset *kset);
              kobject_set_name(&my_set->kobj, "The name");
     - Subsystems is a representation for a high-level of the kernel. Example
       subsystems are /sys/block /sys/devices and a specyfic subsystem for
       every bus the kernel knows about. The subsystem structure is just:

          struct subsystem {
            struct kset kset;
            struct rw_semaphore rwsem;
          };

       All ksets belong to a subsystem. The semaphore is used to serialize the
       access to the kset list. The kset subsys points to the subsystem object
       it belongs. The subystem does not have pointers to the ksets. Subsystems
       are created with
          decl_subsys(name, struct kobj_type *type, struct kset_hotplug_ops *hotplug_ops);
 - Kobjects and Sysfs
    - Kobjects are the mechanism behind the sysfs virtual filesystem. For every
      directory found in sysfs, there is a kobject lurking somewhere within the
      kernel. Every kobject of interest also exports one or more attributes,
      which appear in that kobject’s sysfs directory as files containing
      kernel-generated information.
    - Code that works with sysfs should include <linux/sysfs.h>.
    - Sysfs entries for kobjects are always directories, so a call to
      kobject_add results in the creation of a directory in sysfs. Usually that
      directory contains one or more attributes; we see how attributes are
      specified shortly.
    - The name assigned to the kobject (with kobject_set_name) is the name used
      for the sysfs directory. Thus, kobjects that appear in the same part of
      the sysfs hier- archy must have unique names. Names assigned to kobjects
      should also be rea- sonable file names: they cannot contain the slash
      character, and the use of white space is strongly discouraged.
    - The sysfs entry is located in the directory corresponding to the
      kobject’s parent pointer. If parent is NULL when kobject_add is called,
      it is set to the kobject embedded in the new kobject’s kset; thus, the
      sysfs hierarchy usually matches the internal hierarchy created with
      ksets. If both parent and kset are NULL , the sysfs directory is created
      at the top level, which is almost certainly not what you want.
    - The kobject's attributes are defined in the kobj_type struct:
        struct kobj_type {
          void (*release)(struct kobject *);
          struct sysfs_ops *sysfs_ops;
          struct attribute **default_attrs;
        };
    - The strut attribute is an array that contains the files to be shown on
      the directorhy, the module where they belong and the permisions (read/write)
        struct attribute {
          char *name;
          struct module *owner;
          mode_t mode;
        };
    - The functions to show and store a value to the attribute (file) are
      stored in the kobj_type's sysfs_ops struct:
        struct sysfs_ops {
          ssize_t (*show)(struct kobject *kobj, struct attribute *attr,
          char *buffer);
          ssize_t (*store)(struct kobject *kobj, struct attribute *attr,
          const char *buffer, size_t size);
        };
      buffer is of PAGE_SIZE. The show function must return the actual lenght.
    - The conventions for sysfs state that each attribute should contain a
      single, human-readable value; if you have a lot of information to return,
      you may want to consider splitting it into multiple attributes.
    - Appart form the defaults, Attributes can be added and removed at any time
      using the:
        int sysfs_create_file(struct kobject *kobj, struct attribute *attr);
	int sysfs_remove_file(struct kobject *kobj, struct attribute *attr);
    - For attributes that need to pass a big chunk of binary data to the
      device (such as uploading a firmware), use the struct:
        struct bin_attribute {
          struct attribute attr;
          size_t size;
          ssize_t (*read)(struct kobject *kobj, char *buffer,
          loff_t pos, size_t size);
          ssize_t (*write)(struct kobject *kobj, char *buffer,
          loff_t pos, size_t size);
        };
 - Symbolic links
    - /sys/devices contain all devices known to the system. /sys/bus contains
      all the device drivers. The link between devices and drivers are
      specified by creating symbolic links:
        int sysfs_create_link(struct kobject *kobj, struct kobject *target,
                              char *name);
        void sysfs_remove_link(struct kobject *kobj, char *name);
      The create function creates a link (called name ) pointing to target ’s
      sysfs entry as an attribute of kobj . It is a relative link, so it works
      regardless of where sysfs is mounted on any particular system.
 - Hotplug
    - Notification form User-space to kernel-space whenever a kboject is
      created or destroyed. Hotplug events turn into an invocation of
      /sbin/hotplug, which can respond to each event by loading drivers,
      creating device nodes, mounting partitions, or taking any other action
      that is appropriate.
    - Actual control of hotplug events is exercised by way of a set of methods
      stored in the kset_hotplug_ops structure:
        struct kset_hotplug_ops {
          int (*filter)(struct kset *kset, struct kobject *kobj);
          char *(*name)(struct kset *kset, struct kobject *kobj);
          int (*hotplug)(struct kset *kset, struct kobject *kobj,
          char **envp, int num_envp, char *buffer,
          int buffer_size);
        };
      A pointer to this structure is found in the hotplug_ops field of the kset
      structure. If a given kobject is not contained within a kset, the kernel
      searchs up through the hier- archy (via the parent pointer) until it finds
      a kobject that does have a kset; that kset’s hotplug operations are then
      used.
    - The filter hotplug operation is called whenever the kernel is considering
      generating an event for a given kobject. If filter returns 0 , the event
      is not created.
    - The name hotplug method returns a string which is passed to the
      user-space hotplug command. The other user-space hotplug paramenters are
      passed through environment variables.
    - The hotplug method is used to create such environment variables.
 - Devices
    - At the lowest level, every device is represented by a struct device:
        struct device {
          struct device *parent;
          struct kobject kobj;
          char bus_id[BUS_ID_SIZE];
          struct bus_type *bus;
          struct device_driver *driver;
          void *driver_data;
          void (*release)(struct device *dev);
          /* Several fields omitted */
        };
      The most important fields are:
        - parent -> points to the device this device is attached to, usually a
          bus. If null, it is a top device.
        - kobj -> This device kobject that links it to the hierarchy. As a
          general rule: device->kobj->parent == &device->parent->kobj
        - char bus_id[BUS_ID_SIZE] -> A string that uniquely identifies the
          device.
        - struct bus_type *bus -> The type of bus the device sits on.
        - struct device_driver *driver -> The driver of the device.
        - void *driver_data -> Private device data.
        - void (*release)(struct device *dev) -> method called when the last
          referencce to the device is removed (it is called from the kobject's
          relaease method).
    - To regiser/unregister the device:
        int device_register(struct device *dev);
        void device_unregister(struct device *dev);
      The device appears under the bus /sys/devices/<bus_type>/ directory.
      Buses are also devices!!!
    - Devices also have attributes:
        struct device_attribute {
          struct attribute attr;
          ssize_t (*show)(struct device *dev, char *buf);
          ssize_t (*store)(struct device *dev, const char *buf,
          size_t count);
        };

        DEVICE_ATTR(name, mode, show, store); -> create at compile time with
        the name dev_attr_<name>

        int device_create_file(struct device *device,
        struct device_attribute *entry);
        void device_remove_file(struct device *dev,
        struct device_attribute *attr);
    - The device structure contains all the information of the core device
      management infrastrucutre. However, different types of devices have
      their own structures with speceific information. Look at
      struct pic_dev (<linux/pci.h>) and struct usb_device (<linux/usb.h>)
      for an example. The ldd struct looks like:
        struct ldd_device {
          char *name;
          struct ldd_driver *driver;
          struct device dev;
        };
        #define to_ldd_device(dev) container_of(dev, struct ldd_device, dev);
    - And the register function. Here, we simply fill in some of the embedded
      device structure fields (which individ- ual drivers should not need to
      know about), and register the device with the driver core. If we wanted
      to add bus-specific attributes to the device, we could do so here.
        int register_ldd_device(struct ldd_device *ldddev)
        {
          ldddev->dev.bus = &ldd_bus_type;
          ldddev->dev.parent = &ldd_bus;
          ldddev->dev.release = ldd_dev_release;
          strncpy(ldddev->dev.bus_id, ldddev->name, BUS_ID_SIZE);
          return device_register(&ldddev->dev);
        }
        EXPORT_SYMBOL(register_ldd_device);
    - Devices on a specific bus, do not deal with the struct device itself
      directly, but with the bus specific strucutres that embbed the struct
      device, as well as the custom bus functions to register the device.
    - So, here we are creating a new bus_type, registering it and creating the
      actual bus (which is a device by itself) along with all the helper functions
      that devices attaches to our bus will need. In the bus definition, we
      define the ldd_device structure which devices attaching to the bus will
      embbed whithin themselves. The actual "struct device" of our custom
      device embedded in our custom bus will be located at the
      struct ldd_device. Then, we define the helper functions for our custom
      device attached to our custom bus which is basically the register
      function. The custom device register function taskes has input the custom
      device struct and knows that it has to be attached to our custom bus, hence
      this function gets the struct ldd_device (the bus)  of the custom device
      and call our custom bus function to register a new custom device in our
      custom bus, which itself takes the actual struct device and registers it
      whithin the kernel. OMG.
    - Still in other words:
       1) we create a new bus type (struct bus_type  ldd_bus_type) and the bus
          itself (struct ldd_device ldd_bus) alongside all functions to register
          and unregister devices to the bus (int register_ldd_device(struct
          ldd_device *), void unregister_ldd_device(struct ldd_device *),
          register_ldd_driver(struct ldd_driver *), void
          unregister_ldd_driver(struct ldd_driver *)),
       2) create a new type of device that is to be pluged on the new bus type
          (struct sculld_dev) and all functions to register it transparently
          into the new bus type ( void sculld_register_dev(struct sculld_dev *dev, int index))
          where special attribute files for the new device type are created and
 - Device Drivers
    - The device model tracks all of the drivers known to the system. The main
      reason for this tracking is to enable the driver core to match up drivers
      with new devices.
    - Device drivers are defined using this structure <linux/device.h>:
        struct device_driver {
          char *name;
          struct bus_type *bus;
          struct kobject kobj;
          struct list_head devices;
          int (*probe)(struct device *dev);
          int (*remove)(struct device *dev);
          void (*shutdown) (struct device *dev);
        };

        int driver_register(struct device_driver *drv);
        void driver_unregister(struct device_driver *drv);

        struct driver_attribute {
          struct attribute attr;
          ssize_t (*show)(struct device_driver *drv, char *buf);
          ssize_t (*store)(struct device_driver *drv, const char *buf,
          size_t count);
        };
        DRIVER_ATTR(name, mode, show, store);

        int driver_create_file(struct device_driver *drv,
                               struct driver_attribute *attr);
        void driver_remove_file(struct device_driver *drv,
                                struct driver_attribute *attr);

        The bus_type structure contains a field ( drv_attrs ) that points to a
        set of default attributes, which are created for all drivers associated
        with that bus.

    - The fields are:
        - name: the name shown in /sys
        - devices: list of devices using the driver.
        - probe: function to check if the drivers knows about the device.
        - remove: called when removing the device.
        - shutdown: called when issuing a shutdown to the device.
    - The core driver structure is usually found inside another bus driver
      structure, such as devices.
        struct ldd_driver {
          char *version;
          struct module *module;
          struct device_driver driver;
          struct driver_attribute version_attr;
        };
        #define to_ldd_driver(drv) container_of(drv, struct ldd_driver, driver);
 - Classes
    - Drivers may see a SCSI disk or an ATA disk, but, at the class level, they
      are all sim- ply disks. Classes allow user space to work with devices
      based on what they do, rather than how they are connected or how they
      work.
    - Almost all classes show up in sysfs under /sys/class. Thus, for example,
      all network interfaces can be found under /sys/class/net, regardless of
      the type of interface. Input devices can be found in /sys/class/input,
      and serial devices are in /sys/class/tty. The one exception is block
      devices, which can be found under /sys/block for historical reasons.
    - Users more happily find information in /sys/class/some-widget than under,
      say, /sys/devices/pci0000:00/0000:00:10.0/usb2/2-0:1.0
    - There are two interfaces for classes: simple and full
    - To set up a __simple__ class:
       - create:
          struct class_simple *class_simple_create(struct module *owner, char *name);
       - Add device:
          struct class_device *class_simple_device_add(struct class_simple *cs,
              dev_t devnum, struct device *device, const char *fmt, ...);
          Here, cs is the previously created simple class, devnum is the
          assigned device number, device is the struct device representing this
          device, and the remaining parameters are a printk-style format string
          and arguments to create the device name. This call adds an entry to
          the class containing one attribute, dev , which holds the device num-
          ber. If the device parameter is not NULL , a symbolic link (called
          device ) points to the device’s entry under /sys/devices.
       - Create more attributes (optional): with class_device_create_file
       - To remove the device:
          void class_simple_device_remove(dev_t dev);
       - To remove the class:
          void class_simple_destroy(struct class_simple *cs);
     - Check ldd pg 389 for the full class interface.
   
       



 - A driver (module) implements one ore more devices (/dev/something1
   /dev/something2)
 - block devices or blkdevs, accessed by block device node
 - char devices or cdevs, accessed by character device node
 - network devices or ethernet devices. They break the Unix's "everything is a
   file" principle and are noa accessed via a device node but with a special
   interface called the socket API.
 - Miscellaneous devices or miscdevs. Are simplified character devices.
 - pseudo devices, they are not hardware devices, such as /dev/random

BASICS
 - basic structure
     #include <linux/module.h>  /* needed for all modules */
     #include <linux/kernel.h>  /* needed for KERN_ALERT */

     static int hello_init(void)
     {
     	printk(KERN_ALERT “I bear a charmed life.\n”);
     	return 0;
     }
     
     /*
     * hello_exit – the exit function, called when the module is removed.
     */
     static void hello_exit(void)
     {
     	printk(KERN_ALERT “Out, out, brief candle!\n”);
     }
     
     module_init(hello_init); // register init function
     module_exit(hello_exit); // register exit function
     MODULE_LICENSE(“GPL”);   // specify liscence. It's not only informative
     MODULE_AUTHOR(“Shakespeare”); // autor
     MODULE_DESCRIPTION(“A Hello, World Module”); // descritpion
 - Modules built into the kernel will execute the init function during boot time
   and will never execute the exit function.
 - Static functions are only visible on the compilation unit (file with
   resolved includes) where are defined.
 - Modules can only use exported symbols inside the core declared as 
     int get_pirate_beard_color(struct pirate *p) {
         return p->beard.color;
     }
     EXPORT_SYMBOL(get_pirate_beard_color);
   or as EXPORT_SYMBOL_GPL, which will be able to be called only for GPL
   modules.
 - The return value of init function, is an error code.  which should be
   defined in <linux/errno.h>. 

MODULE PARAMETERS
 - module_param( name , type , perm );
     - name is the name of both the parameter exposed to the user and the
       variable holding the parameter inside your module.
     - type -> argument holds the parameter’s data type; one of byte , short ,
       ushort , int , uint , long , ulong , charp , bool , or invbool. These
       types are, respectively, a byte, a short integer, an unsigned short
       integer, an integer, an unsigned integer, a long integer, an unsigned
       long integer, a pointer to a char , a Boolean, and a Boolean whose value
       is inverted from what the user specifies.The byte type is stored in a
       single char and the Boolean types are stored in variables of type int .
       The rest are stored in the corresponding primitive C types. 
     - perm -> specifies the permissions of the corresponding file in sysfs.The
       permissions can be specified in the usual octal format, for example 0644
       (owner can read and write, group can read, everyone else can read), or
       by ORing together the usual S_Ifoo defines, for example S_IRUGO |
       S_IWUSR (everyone can read; user can also write).A value of zero
       disables the sysfs entry altogether. These macros are defined at
       <linux/stat.h>. if a parameter is changed by sysfs, the value of that
       parameter as seen by your module changes, but your module is not
       notified in any other way.

     - You must declare the variable before using the macro as a global var. 
          static int allow_live_bait = 1;
          module_param(allow_live_bait, bool, 0644); /* a Boolean type */
 - module_param_named( name , variable , type , perm )
    - Used to have the internal variable named differently than the
      external parameter.
 - module_param_string( name , string , len , perm ); 
    - To decalre a string,
        static char *name;
        module_param(name, charp, 0);
      but is also possible to ask the kernel to copy data into an array
        static char species[BUF_LEN];
        module_param_string(specifies, species, BUF_LEN, 0);
 - module_param_array(name, type, nump, perm);
     - accept a comma-separated list of parameters stored in a C array. nump is
       a pointer to an integer in which the kernel stores the number of entries
       stored into the array.
         static int fish[MAX_FISH];
         static int nr_fish;
         module_param_array(fish, int, &nr_fish, 0444);
 - module_param_array_named( name , array , type , nump , perm );
     - The same as the above but with different name for the static var
 - Describe module parameters
     static unsigned short size = 1;
     module_param(size, ushort, 0644);
     MODULE_PARM_DESC(size, “The size in inches of the fishing pole.”);

VERSIONING MACROS
 - defined in include/version.h and included by include/modules.h
 - When writting code dependent on version numbering, try to put all possible
   ifdef's on the header files.
 - UTS_RELEASE -> This macro expands to a string describing the version of this
   kernel tree. For example, "2.6.10" .  LINUX_VERSION_CODE -> This macro
   expands to the binary representation of the kernel version, one byte for
   each part of the version release number. For example, the code for 2.6.10 is
   132618 (i.e., 0x02060a). * With this information, you can (almost) easily
   deter- mine what version of the kernel you are dealing with.
 - KERNEL_VERSION(major,minor,release) -> This is the macro used to build an
   integer version code from the individual num- bers that build up a version
   number. For example, KERNEL_VERSION(2,6,10) expands to 132618. This macro is
   very useful when you need to compare the current version and a known
   checkpoint.

MAJOR MINOR NUMBERS
 - Documentation/devices.txt -> official list of statically assigned device
   numbers.
 - /proc/devices -> major number of registered devices
 - The major number identifies the driver associated with the device. For
   example, /dev/null and /dev/zero are both managed by driver 1, whereas
   virtual consoles and serial terminals are managed by driver 4;
 - The minor number determines which device is being referred to. Depending on
   how your driver is written (as we will see below), you can either get a
   direct pointer to your device from the kernel, or you can use the minor
   number yourself as an index into a local array of devices.
 - Macros
    - MAJOR(dev_t dev) -> obtain major number
    - MINOR(dev_t dev) -> obtain minor number
    - MKDEV(int major, int minor) -> create dev_t from major and minor numbers.
    - int register_chrdev_region(dev_t first, unsigned int count,
      char *name); -> get one ore more (count) device numbers. It is better to 
      dynamically allocate them with alloc_chrdev_region.
        - first: Starting minor number (0, typically)
        - count: Number of devices to allocate
        - name: Visible name in /proc/devices and sysfs
        - returns 0 if ok, negative otherwise.
    - int alloc_chrdev_region(dev_t *dev, unsigned int firstminor,
      unsigned int count, char *name) -> dynamically allocate major and minor
      numbers. dev is an output only parameter and firstminor is the first minor
      number.
    - void unregister_chrdev_region(dev_t first, unsigned int count); ->
      unregister device numbers.
    - mknode -> create a device (/dev/) given a major and minor number. To know
      the major number of a dynamically allocated device, parse /proc/devices
      after loading the module.
COMPILATION GENERAL
 - To compile modules run 
       make modules -> compile
       make modules_install -> install modules in /lib/modules/<kernel-version/kernel

COMPILATION OF A NEW MODULE
 - Inside the kernel tree
     - Select the directory inside drivers/ where you want to place your files,
       for instance drivers/char
     - If your module is made of two files (more or less) place the files on
       a directory altoghether with other modules. Otherwise, create a folder
       for your module, for instance /drivers/char/fishing.
     - Edit the drivers/char/Makefile and add the line:
         obj-m += fishing/  # compile always
       so the makefile will descend into your folder. To compile the module 
       when the CONFIG_FISHING_POLE option is set:
         obj-$(CONFIG_FISHING_POLE) += fishing/ # compile when option is on
     - Add a new makefile on drivers/char/fishing/Makefile and write:
         obj-m += fishing.o 
       or
         obj-$(CONFIG_FISHING_POLE) += fishing.o 
     - If the module has multiple source files:
         obj-$(CONFIG_FISHING_POLE) += fishing.o
         fishing-objs := fishing-main.o fishing-line.o
     - To add specific C flags for this files, add:
         EXTRA_CFLAGS += -DTITANIUM_POLE
     - If the files where not placed on a new directory, simply add the above
       lines on the top Makefile.
     - The final module will be named fishing.ko
     - Compile the kernel as usual (but enable the CONFIG option if used!)
     - To add the module to the menuconfig (Kbuild system):
         - Use an existing Kconfig file or create a new one and source it from 
           the previous Kconfig file on the directory hierarchy with:
             source “drivers/char/fishing/Kconfig”
         - Add to the Kconfig file:
             config FISHING_POLE
                 [tristate | bool] “Fish Master 3000 support” [if OPTION]  
                 default n # default option (n/y/m)
                 [depends on FISHTANK && !TOXIC] # Fishtank must be enabled and toxic disabled first
                 [select BAITH] # Automatically selected if FISHING_POLE is selected
                 help
                     If you say Y here, support for the Fish Master 3000 with computer
                     interface will be compiled into the kernel and accessible via a
                     device node. You can also say M here and the driver will be built as a
                     module named fishing.ko.

                     If unsure, say N.
          - tristate means that this module can be installed as module (m), 
            built into the kernel (Y) or not buitd (N).
          - bool means that this module can be build into the kernel (Y) or
            not (N)
          - The [if OPTION] means that only if OPTION is set, the entiry entry
            will be visible on the menuconfig.
  - Outside the kernel
     - Create a folder, put your source there and create a makefile just like
       in the "Inside the kernel tree" form.
     - Invoke make from your module folder as
         make -C /kernel/source/location SUBDIRS=$PWD modules
       the -C option is to change directory before building.
     
COMMANDS FOR MODULE MANIPULATION
  - depmod -> (command) auto generate module dependency info for an already
    running kernel to be used for other module mainipulation commands. This is
    typically done by Linux distributions at boot time.
  - insmod <module>.ko -> load module withouth cheking dependencies nor anything.
  - rmmod <module> -> unload already loaded module
  - modprobe <module> [ module parameters ] -> load module and resolve 
    dependencies. The module parameters can also be specified in the files 
    located at /etc/modprobe.conf
  - modprobe -r <module> -> unload module. Also unload dependent and unused 
    modules


FILE OPERATIONS
 - Look at LDD p 49 for a brief description of the methods
The File Structure
 - Look at LDD3 p 53 for a brief description of the fields
 - The operations associated with the file are keept in f_op. The kernel
   assigns the pointer as part of its implementation of open and then reads it
   when it needs to dispatch any oper- ations. The value in filp->f_op is never
   saved by the kernel for later reference; this means that you can change the
   file operations associated with your file, and the new methods will be
   effective after you return to the caller. For example, the code for open
   associated with major number 1 (/dev/null, /dev/zero, and so on) substitutes
   the operations in filp->f_op depending on the minor number being opened.
   This practice allows the implementation of several behaviors under the same
   major number without introducing overhead at each system call. The abil- ity
   to replace the file operations is the kernel equivalent of “method
   overriding” in object-oriented programming.
 - void * private_data -> We can use this pointer to hold any data that might
   be interesting to preserve between system calls. We are free to use for
   whatever we want.
 INODE
 - The inode structure is used by the kernel internally to represent files.
   Therefore, it is different from the file structure that represents an open
   file descriptor. There can be numerous file structures representing multiple
   open descriptors on a single file, but they all point to a single inode
   structure.
 - dev_t i_rdev -> For inodes that represent device files, this field contains
   the actual device number. Use iminor() and imajor() instead of manipulating
   it directly.
 - struct cdev *i_cdev -> struct cdev is the kernel’s internal structure that
   represents char devices; this field contains a pointer to that structure when
   the inode refers to a char device file.


MANAGING MODULES
 - modinfo <module_name> -> list module info
 - Search for the CONFIG_ option that enables module named 'usbcore'
     fgrep -r --include=Makefile ' usbcore.o'

HOTPLUG
 - The complete story is in: https://wiki.archlinux.org/index.php/Modalias
 - There are two mechanisms for hotplugging: /sbin/hotplug old mechanism and
   the new udev mechanism.
 - When a new hardware is plugged, the kernel sets a number of environment
   variables and calls the /sbin/hotplug command or it sends the informaton
   to a udev deamon through a socket.
 - The /sbin/hotplug relies on a set of user-space scripts that determine the
   right module to load based on the environemnt variables. Then it loads the
   right module with modprobe.
 - udev uses the environement variables against a set of udev dules that are
   defined at /etc/udev/rules.d/ to determine which module to load and the
   files that need to be created at /dev.
 - Module drivers register themselves to a subystem (see device_model) and
   specify which hardware they accept. The hardware can be either a specific
   vendor and product ID or a generic class, such as a HID device. For the
   USB subsystem, this is done like this:

      static const struct usb_device_id usb_hello_id_table[] = {
              { USB_INTERFACE_INFO(USB_INTERFACE_CLASS_HID, USB_INTERFACE_SUBCLASS_BOOT,
                      USB_INTERFACE_PROTOCOL_KEYBOARD) },
              { }                                             /* Terminating entry */
      };
      MODULE_DEVICE_TABLE(usb, usb_hello_id_table);
      
      static struct usb_driver hello_driver = {
              .name =         "hello",
              .probe =        hello_probe,
              .disconnect =   hello_disconnect,
              .id_table =     usb_hello_id_table,
      };
      
      static struct usb_driver hello_driver;

    And then the driver is registered into the core:

       result = usb_register(&hello_driver);
       if (result < 0) {
               err("usb_register failed for the "__FILE__ "driver."
                   "Error number %d", result);
               return -1;
       }

  - When the kernel is installed, the depmod command extracts the accepted
    device ids for each module and creates the file
    /lib/modules/`uname -r`/modules.alias . Which contains rules as:
      alias usb:v*p*d*dc*dsc*dp*ic03isc01ip01in* hello
    The udev deamon uses this rules to determine which module to load based
    on the environment linux kernel variables:
      DRIVER!="?*", ENV{MODALIAS}=="?*", RUN{builtin}="kmod load $env{MODALIAS}"
    See ./udev file for more udev things.




COMPILE AGAINST CUSTOM GLIBC
 - official instructions: https://sourceware.org/glibc/wiki/Testing/Builds
 - to test an application compiled agains the system glibc, but instead, load
   your custom glibc installation, best is to use the testrun.sh script in the
   build directory. Be aware that we will still be using the system glibc c
   runtime (crt0.o and others). Also be sure to pass it the absolute binary path.
 - for debugging, use the debugglibc.sh script in the build dir. If your binary
   doesn't have debug symbols in a separte file, run the script with the "-s"
   option. Also be sure to pass it the absolute binary path. Please check the
   script help for the full options, note that you can pass env variables to it
   without using 'env' with -e !

ENTRY POINT
 - rough startup guide: https://sourceware.org/glibc/wiki/DynamicLoader
 - The kernel first invokes the loader.
 - The loader entry point is _start.
 - _start is defined in glibc source code under sysdeps/x86_64/dl-machine.h
 - _start first calls _dl_start, which returns the user entry-point. The user
   entry point is the executable _start symbol.
     - _dl_start calls dl_start_final 
     - dl_start_final initializes GL(dl_rtld_map) and calls _dl_sysdep_start
     - dl_sysdep_start (systedp/unix/sysv/linux/dl-sysdep.c) does a few
       OS-specific things (like stack-related setups) and calls "dl_main"
       (elf/rtld.c) which does all the real work of the dynamic linker, and
       then unwinds the frame and run the user entry point on the same stack
       that it entered on (froma comment in _dl_start_final)
     - dl_main (elf/rtld.c)
        - creates a link_map for the executable itself named "main_map"
        - sets up vdso (system supplied DSO)
        - loads auditing DSOs (see LD_AUDIT)
        - calls _dl_audit_activity_map and LIBC_PROBE(init_start) to signal the
          the initial map is about to be constructed
        - reads LD_PRELOAD and /etc/ld.so.preload 
        - calls _dl_map_object_deps to load and sort the libraries specified
          by DT_NEEDED entries of the main binary and LD_PRELOAD libraries.
          i.e. it builds the main_map->l_searchlist list.
           - _dl_map_object_deps reads the DT_NEEDED entries of MAP (the main binary) and
             adds it to main_map->l_searchlist
           - _dl_map_object_deps itself only creates a Breadth first list of depencendies
             in the variable l_initfini. The actual sorting of shared libraries regarding
             their dependencies is made by _dl_sort_maps function in elf/dl-sort-maps.c.
           - _dl_map_object_deps writes the dependencies (DT_NEEDED) of each
             link_map (dso) into the link_map->l_initfini, this includes the
             main_map (the executable).
           - The list of dependencies in breath first order is stored in
             main_map->l_search_list. This is the lockup scope! (i.e. the
             symbol resolution order list)
           - The SORTED list of dependencies is written into
             main_map->l_initfini, which has the main_map as the first entry.
             This is the order in which constructors are called!
	- marks all objects in main_map->l_searchlist (which also implies
	  l_initfini) as being in the global scope.
	- it checks if all libraries are available in the needed version
	- inits TLS (but I don't get the details, maybe is not completely init here)
	- next dl_main relocats all loaded shared objects but the dynamic
	  loader (I don't know why). When this happens, it calls
	  dl_audit_activity_nsid signaling that all objects have been added. It
	  also calls LIBC_PROBE(init_complete).
	- seems to finish TLS initialization here
	- performs early libc initialization by calling _dl_call_libc_early_init
 - then it calls _dl_init (elf/dl-init.c) which calls the constructors of all
   dso, following the order in main_map->l_initfini.
 - when it returns, it calls the _dl_start returned address (__libc_start_main).
 - This, is the user-binary _start address.
 - _start quickly jumps to __libc_start_main and it's expected to do not return.

      STATIC int LIBC_START_MAIN (int (*main) (int, char **, char ** MAIN_AUXVEC_DECL),                                                                             
         int argc, char **argv,                                                                                                
      #ifdef LIBC_START_MAIN_AUXVEC_ARG                                                                                                       
         ElfW(auxv_t) *auxvec,                                                                                       
      #endif                                                                                                                                  
         __typeof (main) init,
         void (*fini) (void),
         void (*rtld_fini) (void),
         void *stack_end
      )                                                                                            

 - __libc_start_main simply calls the constructors of all shared objects and
   binary. It also registers the function that calls all destructors, which is
   passed as an arguemnt (rtld_fini).
 - 

DESTRUCTORS
 - each process has a list of functions to call at exit (atexit())
 - this list is processed when returning from LIBC_START_MAIN or when the user
   calls exit(). notice that calling _exit() skips this step.
 - In this list, it is registered the _dl_fini() loader function at LIBC_START_MAIN.
 - The _dl_fini function, when called after all user atexit() functions, calls de destructors.
 - To do so, it needs to sort all the loaded DSOs in the right order (a
   destructor of a library is only called if all destructors of the library it
   depends on have been called).
 - We cannot simply use the inverse constructor order because the user might
   have added new libraries at runtime with dlopen.
 - sorting the DSOs is done by the function _dl_sort_maps() which uses an algorithm similar to an "insert sort"


 LINK MAP
  - struct link_map, defined in include/link.h represents a DSO.


TLS
 - this contains the definition of the "header" sysdeps/x86_64/nptl/tls.h the
   pthread_t of the current thread is stored there.
